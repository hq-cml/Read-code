#!/bin/sh

# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.

#设置Locale，软件在运行时的语言环境
LC_ALL=C
export LC_ALL

#". file"：这种用法相当于source一个文件（类似于c的include），在shell中是模块化和复用的效果
#详细解释：http://blog.csdn.net/arganzheng/article/details/6786926

#auto/options脚本处理configure命令的参数。例如，如果参数是--help，那么显示支持的所有参数格式。
#options脚本会定义后续工作将要用到的变量，然后根据本次参数以及默认值设置这些变量
. auto/options

#auto/init脚本初始化后续将用到的各类文件的路径。
#例如，Makefile、ngx_modules.c等文件默认情况下将会在<nginx-source>/objs/
#此外还会check echo的-n和\c，并且还会生成makefile文件
. auto/init

#auto/sources脚本将分析Nginx的源码结构，列举出所有依赖的头文件和源文件
#这些文件后续会用来构造Makefile文件
. auto/sources

#如果目录$NGX_OBJS，不存在则创建之，这个变量在options中由—builddir=DIR参数指定
#它用于编译过程中所有目标文件生成的存放，默认情况下为<nginx-source>/objs
test -d $NGX_OBJS || mkdir $NGX_OBJS

#创建空文件ngx_auto_headers.h、autoconf.err等必要的编译文件
#auto/init中定义了  NGX_AUTO_HEADERS_H和NGX_AUTOCONF_ERR变量
echo > $NGX_AUTO_HEADERS_H
echo > $NGX_AUTOCONF_ERR

#以宏定义形式向objs/ngx_auto_config.h写入命令行带的参数
#$NGX_CONFIGURE的内容在options的分析中有详细说明
echo "#define NGX_CONFIGURE \"$NGX_CONFIGURE\"" > $NGX_AUTO_CONFIG_H

#判断DEBUG标志，如果有，那么在objs/ngx_auto_config.h文件中写入DEBUG宏
#这种写法在下面经常出现，期含义是先定义have变量为NGX_DEBUG，然后调用auto/have
#have脚本的行为是将NGX_DEBUG以宏定义形式写入ngx_auto_config.h文件
#最终ngx_auto_config.h文件会有有一段如下内容：
#ifndef NGX_DEBUG
#define NGX_DEBUG  1
#endif
if [ $NGX_DEBUG = YES ]; then
    have=NGX_DEBUG . auto/have
fi

#现在开始检查操作系统参数是否支持后续编译
if test -z "$NGX_PLATFORM"; then
    echo "checking for OS"

    NGX_SYSTEM=`uname -s 2>/dev/null`  	#系统名     
    NGX_RELEASE=`uname -r 2>/dev/null`  #内核版本
    NGX_MACHINE=`uname -m 2>/dev/null`  #当前硬件设备类型-CPU型号

    echo " + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE"

	#输出当前平台信息
    NGX_PLATFORM="$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE";

    case "$NGX_SYSTEM" in
        MINGW32_*)
            NGX_PLATFORM=win32
        ;;
    esac

else
    echo "building for $NGX_PLATFORM"
    NGX_SYSTEM=$NGX_PLATFORM
fi

#检查并设置编译器，如GCC是否安装、GCC版本是否支持后续编译nginx
. auto/cc/conf

if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/headers
fi


. auto/os/conf

if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/unix
fi

. auto/threads
. auto/modules
. auto/lib/conf

case ".$NGX_PREFIX" in
    .)
        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;

    .!)
        NGX_PREFIX=
    ;;

    *)
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;
esac

if [ ".$NGX_CONF_PREFIX" != "." ]; then
    have=NGX_CONF_PREFIX value="\"$NGX_CONF_PREFIX/\"" . auto/define
fi

have=NGX_SBIN_PATH value="\"$NGX_SBIN_PATH\"" . auto/define
have=NGX_CONF_PATH value="\"$NGX_CONF_PATH\"" . auto/define
have=NGX_PID_PATH value="\"$NGX_PID_PATH\"" . auto/define
have=NGX_LOCK_PATH value="\"$NGX_LOCK_PATH\"" . auto/define
have=NGX_ERROR_LOG_PATH value="\"$NGX_ERROR_LOG_PATH\"" . auto/define

have=NGX_HTTP_LOG_PATH value="\"$NGX_HTTP_LOG_PATH\"" . auto/define
have=NGX_HTTP_CLIENT_TEMP_PATH value="\"$NGX_HTTP_CLIENT_TEMP_PATH\""
. auto/define
have=NGX_HTTP_PROXY_TEMP_PATH value="\"$NGX_HTTP_PROXY_TEMP_PATH\""
. auto/define
have=NGX_HTTP_FASTCGI_TEMP_PATH value="\"$NGX_HTTP_FASTCGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_UWSGI_TEMP_PATH value="\"$NGX_HTTP_UWSGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_SCGI_TEMP_PATH value="\"$NGX_HTTP_SCGI_TEMP_PATH\""
. auto/define

. auto/make
. auto/lib/make
. auto/install

# STUB
. auto/stubs

have=NGX_USER value="\"$NGX_USER\"" . auto/define
have=NGX_GROUP value="\"$NGX_GROUP\"" . auto/define

if [ ".$NGX_BUILD" != "." ]; then
    have=NGX_BUILD value="\"$NGX_BUILD\"" . auto/define
fi

. auto/summary

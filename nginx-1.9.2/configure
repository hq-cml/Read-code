#!/bin/sh

# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.

##############################################################################################
#
#一些说明：
#1. auto/have
#   这种写法在configure中经常出现，期含义是先定义have变量为某个字符串，然后调用auto/have脚本
#   have脚本的行为是将have表示的字符串以宏定义形式写入ngx_auto_config.h文件
#
#2. 简单的main函数
#   confugure在检查某个特性是否存在的时候，会生成一个c文件，有一个main函数并include待检测头文件,
#   如果能够顺利编译则说明系统支持该特性，编译结果写入objs/autoconf.err
#
#3. auto/feature
#   该文件类似于一个封装的函数，主要是检查ngx_feature的功能系统是否支持，ngx_feature是动态指定的
#   检查的方法就是利用上面2提到的简单编译.c文件的方式
#
##############################################################################################


#设置Locale，软件在运行时的语言环境
LC_ALL=C
export LC_ALL

#". file"：这种用法相当于source一个文件（类似于c的include），在shell中是模块化和复用的效果
#详细解释：http://blog.csdn.net/arganzheng/article/details/6786926

#auto/options脚本处理configure命令的参数。例如，如果参数是--help，那么显示支持的所有参数格式。
#options脚本会定义后续工作将要用到的变量，然后根据本次参数以及默认值设置这些变量
. auto/options

#auto/init脚本初始化后续将用到的各类文件的路径。
#例如，Makefile、ngx_modules.c等文件默认情况下将会在<nginx-source>/objs/
#此外还会check echo的-n和\c，并且还会生成makefile文件
. auto/init

#auto/sources脚本将分析Nginx的源码结构，列举出所有依赖的头文件和源文件
#这些文件后续会用来构造Makefile文件
. auto/sources

#如果目录$NGX_OBJS，不存在则创建之，这个变量在options中由—builddir=DIR参数指定
#它用于编译过程中所有目标文件生成的存放，默认情况下为<nginx-source>/objs
test -d $NGX_OBJS || mkdir $NGX_OBJS

#创建空文件ngx_auto_headers.h、autoconf.err等必要的编译文件
#auto/init中定义了  NGX_AUTO_HEADERS_H和NGX_AUTOCONF_ERR变量
echo > $NGX_AUTO_HEADERS_H
echo > $NGX_AUTOCONF_ERR

#以宏定义形式向objs/ngx_auto_config.h写入命令行带的参数
#$NGX_CONFIGURE的内容在options的分析中有详细说明
echo "#define NGX_CONFIGURE \"$NGX_CONFIGURE\"" > $NGX_AUTO_CONFIG_H

#判断DEBUG标志，如果有，那么在objs/ngx_auto_config.h文件中写入DEBUG宏
#最终ngx_auto_config.h文件会有有一段如下内容：
#ifndef NGX_DEBUG
#define NGX_DEBUG  1
#endif
if [ $NGX_DEBUG = YES ]; then
    have=NGX_DEBUG . auto/have
fi

#现在开始检查操作系统参数是否支持后续编译
if test -z "$NGX_PLATFORM"; then
    echo "checking for OS"

    NGX_SYSTEM=`uname -s 2>/dev/null`  	#系统名     
    NGX_RELEASE=`uname -r 2>/dev/null`  #内核版本
    NGX_MACHINE=`uname -m 2>/dev/null`  #当前硬件设备类型-CPU型号

    echo " + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE"

	#输出当前平台信息
    NGX_PLATFORM="$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE";

    case "$NGX_SYSTEM" in
        MINGW32_*)
            NGX_PLATFORM=win32
        ;;
    esac

else
    echo "building for $NGX_PLATFORM"
    NGX_SYSTEM=$NGX_PLATFORM
fi

#检查并设置编译器，如GCC是否安装、GCC版本是否支持后续编译nginx
#cc/conf这里其实大致干了几件事情：
#1. 检查编译器类型，通常是gcc
#2. 检查gcc是否可以用，利用gcc编译一个最贱的.c文件，如果顺利编译就表示可用
#3. 确定gcc的编译选项CFLAGS
#4. check是否支持原子操作
#5. check是否支持C99 variadic macros
#6. check是否支持gcc variadic macros
. auto/cc/conf

#对非Windows操作系统定义一些必要的头文件，并检查其是否存在，以此决定configure后续步骤是否可以成功
#具体工作就是不断编写小的.c文件，然后include头文件，看是否能够编译通过
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/headers
fi

#对于当前操作系统，定义一些特定的操作系统相关的方法并检查当前环境是否支持。
#例如，对于Linux，这里会：
# check epoll、EPOLLRDHUP、O_PATH、sendfile、sendfile64等等特性。
#使用sched_setaffinity设置进程优先级，使用Linux特有的sendfile系统调用来加速向网络中发送文件块
. auto/os/conf

#定义类UNIX 操作系统中通用的头文件和系统调用等，并检查当前环境是否支持
#比如：group，poll，kqueue。。。。。
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/unix
fi

#nginx线程池配置，编译选项是--with-threads
#http://www.infoq.com/cn/articles/thread-pools-boost-performance-9x/
. auto/threads

#auto/modules是构造运行期modules的脚本。它将会生成ngx_modules.c文件，这个文件会被编译进Nginx中。
#ngx_modules.c文件所做的唯一的事情就是定义了ngx_modules数组，该数组指明Nginx运行期间有哪些模块会
#参与到请求的处理中，包括HTTP请求可能会使用哪些模块处理，因此，它对数组元素的顺序非常敏感。
#也就是说，#绝大部分模块在ngx_modules数组中的顺序其实是固定的。例如，一个请求必须先执行
#ngx_http_gzip_filter_module模块重新修改HTTP响应中的头部后，才能使用ngx_http_header_filter模块
#按照headers_in结构体里的成员构造出以TCP流形式发送给客户端的HTTP响应头部。
#注意，我们在--add-module=参数里加入的第三方模块也在此步骤写入到ngx_modules.c文件中了
. auto/modules

#conf脚本用来检查Nginx在链接期间需要链接的第三方静态库、动态库或者目标文件是否存在
#比如：PCRE，md5，sha1，zlib等等，采用的方式仍然是尝试编译小文件的方式
. auto/lib/conf

#确定nginx安装路径，写入objs/ngx_auto_config.h宏定义
case ".$NGX_PREFIX" in
    .)
        #如果NGX_PREFIX为空，则就是-后面的值
        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;

    .!)
        NGX_PREFIX=
    ;;

    *)
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;
esac
echo "## -HQ- ##  Debug os/linux kernel version is ...... $version"

#确定nginx配置文件路径前缀，写入objs/ngx_auto_config.h宏定义
if [ ".$NGX_CONF_PREFIX" != "." ]; then
    have=NGX_CONF_PREFIX value="\"$NGX_CONF_PREFIX/\"" . auto/define
fi

#处理Nginx安装后，二进制文件、pid、lock等其他文件的路径，将这些内容作为宏定义写入objs/ngx_auto_config.h
have=NGX_SBIN_PATH value="\"$NGX_SBIN_PATH\"" . auto/define
have=NGX_CONF_PATH value="\"$NGX_CONF_PATH\"" . auto/define
have=NGX_PID_PATH value="\"$NGX_PID_PATH\"" . auto/define
have=NGX_LOCK_PATH value="\"$NGX_LOCK_PATH\"" . auto/define
have=NGX_ERROR_LOG_PATH value="\"$NGX_ERROR_LOG_PATH\"" . auto/define

have=NGX_HTTP_LOG_PATH value="\"$NGX_HTTP_LOG_PATH\"" . auto/define
have=NGX_HTTP_CLIENT_TEMP_PATH value="\"$NGX_HTTP_CLIENT_TEMP_PATH\""
. auto/define
have=NGX_HTTP_PROXY_TEMP_PATH value="\"$NGX_HTTP_PROXY_TEMP_PATH\""
. auto/define
have=NGX_HTTP_FASTCGI_TEMP_PATH value="\"$NGX_HTTP_FASTCGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_UWSGI_TEMP_PATH value="\"$NGX_HTTP_UWSGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_SCGI_TEMP_PATH value="\"$NGX_HTTP_SCGI_TEMP_PATH\""
. auto/define

#创建编译时使用的objs/Makefile文件
. auto/make

#为objs/Makefile加入需要连接的第三方静态库、动态库或者目标文件
#分别调用auto/lib目录下各个子目录中的make文件
. auto/lib/make

#为objs/Makefile加入install功能，当执行make install时,
#将编译生成的必要文件复制到安装路径，建立必要的目录
#此外，对于根目录下的Makefile，也会追加一部分编译内容
. auto/install

# STUB，在ngx_auto_config.h文件中加入NGX_SUPPRESS_WARN宏、NGX_SMP宏
. auto/stubs

#在ngx_auto_config.h文件中指定NGX_USER和NGX_GROUP宏，如果执行configure时没有参数指定
#默认两者皆为nobody（也就是默认以nobody用户运行进程）
have=NGX_USER value="\"$NGX_USER\"" . auto/define
have=NGX_GROUP value="\"$NGX_GROUP\"" . auto/define

if [ ".$NGX_BUILD" != "." ]; then
    have=NGX_BUILD value="\"$NGX_BUILD\"" . auto/define
fi

#显示configure执行的结果，如果失败，则给出原因
. auto/summary
